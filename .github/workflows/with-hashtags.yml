name: Sync Subject Hashtag Labels

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels based on subject hashtags
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Define mapping from hashtag (without '#', lowercase) to actual label name
            const labelMap = {
              "toc": "TOC",
              "cd": "CD",
              "cn": "CN"
            };

            const body = context.payload.issue.body || "";

            // Extract the "Subject" section (everything under ### Subject until next heading or end)
            const subjectMatch = body.match(/### Subject\s*\n([\s\S]*?)(?:\n###|$)/i);
            if (!subjectMatch || !subjectMatch[1]) {
              core.info("No Subject section found; skipping."); 
              return;
            }

            // Find all hashtags in the subject section
            const rawTags = subjectMatch[1].match(/#[a-z0-9_-]+/gi) || [];
            const desiredLabels = rawTags
              .map(t => t.slice(1).toLowerCase())          // remove '#', lowercase
              .filter(key => labelMap[key])                // keep only if mapping exists
              .map(key => labelMap[key]);                  // actual label names

            // Deduplicate
            const uniqueDesired = [...new Set(desiredLabels)];
            core.info(`Desired mapped labels from hashtags: ${uniqueDesired.join(", ")}`);

            // Current labels on the issue
            const currentLabels = (context.payload.issue.labels || []).map(l => l.name);
            core.info(`Current labels on issue: ${currentLabels.join(", ")}`);

            // Subject-related labels (all possible values from labelMap)
            const allSubjectLabels = Object.values(labelMap);

            // Determine which subject labels to remove (present now but not desired)
            const toRemove = currentLabels
              .filter(l => allSubjectLabels.includes(l))
              .filter(l => !uniqueDesired.includes(l));

            // Remove outdated subject labels
            // commenting out removal code for now.
            # for (const label of toRemove) {
            #   try {
            #     await github.rest.issues.removeLabel({
            #       owner: context.repo.owner,
            #       repo: context.repo.repo,
            #       issue_number: context.issue.number,
            #       name: label
            #     });
            #     core.info(`Removed old label: ${label}`);
            #   } catch (e) {
            #     core.warning(`Failed to remove label "${label}": ${e.message}`);
            #   }
            # }

            // Determine which desired labels are missing and need to be added
            const toAdd = uniqueDesired.filter(l => !currentLabels.includes(l));
            if (toAdd.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: toAdd
                });
                core.info(`Added labels: ${toAdd.join(", ")}`);
              } catch (e) {
                core.warning(`Failed to add labels "${toAdd.join(", ")}": ${e.message}`);
              }
            } else {
              core.info("No new labels to add.");
            }
